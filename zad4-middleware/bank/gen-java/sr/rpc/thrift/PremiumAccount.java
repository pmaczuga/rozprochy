/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package sr.rpc.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-04-29")
public class PremiumAccount {

  public interface Iface extends StandardAccount.Iface {

    public CreditInfo requestCredit(java.lang.String pesel, java.lang.String encryptedkey, MoneyStruct amount, int timeInMonths) throws NoSuchAccount, WrongKey, UnsupportedCurrency, WrongMoney, org.apache.thrift.TException;

  }

  public interface AsyncIface extends StandardAccount .AsyncIface {

    public void requestCredit(java.lang.String pesel, java.lang.String encryptedkey, MoneyStruct amount, int timeInMonths, org.apache.thrift.async.AsyncMethodCallback<CreditInfo> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends StandardAccount.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public CreditInfo requestCredit(java.lang.String pesel, java.lang.String encryptedkey, MoneyStruct amount, int timeInMonths) throws NoSuchAccount, WrongKey, UnsupportedCurrency, WrongMoney, org.apache.thrift.TException
    {
      send_requestCredit(pesel, encryptedkey, amount, timeInMonths);
      return recv_requestCredit();
    }

    public void send_requestCredit(java.lang.String pesel, java.lang.String encryptedkey, MoneyStruct amount, int timeInMonths) throws org.apache.thrift.TException
    {
      requestCredit_args args = new requestCredit_args();
      args.setPesel(pesel);
      args.setEncryptedkey(encryptedkey);
      args.setAmount(amount);
      args.setTimeInMonths(timeInMonths);
      sendBase("requestCredit", args);
    }

    public CreditInfo recv_requestCredit() throws NoSuchAccount, WrongKey, UnsupportedCurrency, WrongMoney, org.apache.thrift.TException
    {
      requestCredit_result result = new requestCredit_result();
      receiveBase(result, "requestCredit");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.nsa != null) {
        throw result.nsa;
      }
      if (result.wk != null) {
        throw result.wk;
      }
      if (result.uc != null) {
        throw result.uc;
      }
      if (result.wm != null) {
        throw result.wm;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "requestCredit failed: unknown result");
    }

  }
  public static class AsyncClient extends StandardAccount.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void requestCredit(java.lang.String pesel, java.lang.String encryptedkey, MoneyStruct amount, int timeInMonths, org.apache.thrift.async.AsyncMethodCallback<CreditInfo> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      requestCredit_call method_call = new requestCredit_call(pesel, encryptedkey, amount, timeInMonths, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class requestCredit_call extends org.apache.thrift.async.TAsyncMethodCall<CreditInfo> {
      private java.lang.String pesel;
      private java.lang.String encryptedkey;
      private MoneyStruct amount;
      private int timeInMonths;
      public requestCredit_call(java.lang.String pesel, java.lang.String encryptedkey, MoneyStruct amount, int timeInMonths, org.apache.thrift.async.AsyncMethodCallback<CreditInfo> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pesel = pesel;
        this.encryptedkey = encryptedkey;
        this.amount = amount;
        this.timeInMonths = timeInMonths;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("requestCredit", org.apache.thrift.protocol.TMessageType.CALL, 0));
        requestCredit_args args = new requestCredit_args();
        args.setPesel(pesel);
        args.setEncryptedkey(encryptedkey);
        args.setAmount(amount);
        args.setTimeInMonths(timeInMonths);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CreditInfo getResult() throws NoSuchAccount, WrongKey, UnsupportedCurrency, WrongMoney, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_requestCredit();
      }
    }

  }

  public static class Processor<I extends Iface> extends StandardAccount.Processor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("requestCredit", new requestCredit());
      return processMap;
    }

    public static class requestCredit<I extends Iface> extends org.apache.thrift.ProcessFunction<I, requestCredit_args> {
      public requestCredit() {
        super("requestCredit");
      }

      public requestCredit_args getEmptyArgsInstance() {
        return new requestCredit_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public requestCredit_result getResult(I iface, requestCredit_args args) throws org.apache.thrift.TException {
        requestCredit_result result = new requestCredit_result();
        try {
          result.success = iface.requestCredit(args.pesel, args.encryptedkey, args.amount, args.timeInMonths);
        } catch (NoSuchAccount nsa) {
          result.nsa = nsa;
        } catch (WrongKey wk) {
          result.wk = wk;
        } catch (UnsupportedCurrency uc) {
          result.uc = uc;
        } catch (WrongMoney wm) {
          result.wm = wm;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends StandardAccount.AsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("requestCredit", new requestCredit());
      return processMap;
    }

    public static class requestCredit<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, requestCredit_args, CreditInfo> {
      public requestCredit() {
        super("requestCredit");
      }

      public requestCredit_args getEmptyArgsInstance() {
        return new requestCredit_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<CreditInfo> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<CreditInfo>() { 
          public void onComplete(CreditInfo o) {
            requestCredit_result result = new requestCredit_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            requestCredit_result result = new requestCredit_result();
            if (e instanceof NoSuchAccount) {
              result.nsa = (NoSuchAccount) e;
              result.setNsaIsSet(true);
              msg = result;
            } else if (e instanceof WrongKey) {
              result.wk = (WrongKey) e;
              result.setWkIsSet(true);
              msg = result;
            } else if (e instanceof UnsupportedCurrency) {
              result.uc = (UnsupportedCurrency) e;
              result.setUcIsSet(true);
              msg = result;
            } else if (e instanceof WrongMoney) {
              result.wm = (WrongMoney) e;
              result.setWmIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, requestCredit_args args, org.apache.thrift.async.AsyncMethodCallback<CreditInfo> resultHandler) throws org.apache.thrift.TException {
        iface.requestCredit(args.pesel, args.encryptedkey, args.amount, args.timeInMonths,resultHandler);
      }
    }

  }

  public static class requestCredit_args implements org.apache.thrift.TBase<requestCredit_args, requestCredit_args._Fields>, java.io.Serializable, Cloneable, Comparable<requestCredit_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("requestCredit_args");

    private static final org.apache.thrift.protocol.TField PESEL_FIELD_DESC = new org.apache.thrift.protocol.TField("pesel", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ENCRYPTEDKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("encryptedkey", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("amount", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField TIME_IN_MONTHS_FIELD_DESC = new org.apache.thrift.protocol.TField("timeInMonths", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new requestCredit_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new requestCredit_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String pesel; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String encryptedkey; // required
    public @org.apache.thrift.annotation.Nullable MoneyStruct amount; // required
    public int timeInMonths; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PESEL((short)1, "pesel"),
      ENCRYPTEDKEY((short)2, "encryptedkey"),
      AMOUNT((short)3, "amount"),
      TIME_IN_MONTHS((short)4, "timeInMonths");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PESEL
            return PESEL;
          case 2: // ENCRYPTEDKEY
            return ENCRYPTEDKEY;
          case 3: // AMOUNT
            return AMOUNT;
          case 4: // TIME_IN_MONTHS
            return TIME_IN_MONTHS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIMEINMONTHS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PESEL, new org.apache.thrift.meta_data.FieldMetaData("pesel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ENCRYPTEDKEY, new org.apache.thrift.meta_data.FieldMetaData("encryptedkey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("amount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MoneyStruct.class)));
      tmpMap.put(_Fields.TIME_IN_MONTHS, new org.apache.thrift.meta_data.FieldMetaData("timeInMonths", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(requestCredit_args.class, metaDataMap);
    }

    public requestCredit_args() {
    }

    public requestCredit_args(
      java.lang.String pesel,
      java.lang.String encryptedkey,
      MoneyStruct amount,
      int timeInMonths)
    {
      this();
      this.pesel = pesel;
      this.encryptedkey = encryptedkey;
      this.amount = amount;
      this.timeInMonths = timeInMonths;
      setTimeInMonthsIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public requestCredit_args(requestCredit_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPesel()) {
        this.pesel = other.pesel;
      }
      if (other.isSetEncryptedkey()) {
        this.encryptedkey = other.encryptedkey;
      }
      if (other.isSetAmount()) {
        this.amount = new MoneyStruct(other.amount);
      }
      this.timeInMonths = other.timeInMonths;
    }

    public requestCredit_args deepCopy() {
      return new requestCredit_args(this);
    }

    @Override
    public void clear() {
      this.pesel = null;
      this.encryptedkey = null;
      this.amount = null;
      setTimeInMonthsIsSet(false);
      this.timeInMonths = 0;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getPesel() {
      return this.pesel;
    }

    public requestCredit_args setPesel(@org.apache.thrift.annotation.Nullable java.lang.String pesel) {
      this.pesel = pesel;
      return this;
    }

    public void unsetPesel() {
      this.pesel = null;
    }

    /** Returns true if field pesel is set (has been assigned a value) and false otherwise */
    public boolean isSetPesel() {
      return this.pesel != null;
    }

    public void setPeselIsSet(boolean value) {
      if (!value) {
        this.pesel = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getEncryptedkey() {
      return this.encryptedkey;
    }

    public requestCredit_args setEncryptedkey(@org.apache.thrift.annotation.Nullable java.lang.String encryptedkey) {
      this.encryptedkey = encryptedkey;
      return this;
    }

    public void unsetEncryptedkey() {
      this.encryptedkey = null;
    }

    /** Returns true if field encryptedkey is set (has been assigned a value) and false otherwise */
    public boolean isSetEncryptedkey() {
      return this.encryptedkey != null;
    }

    public void setEncryptedkeyIsSet(boolean value) {
      if (!value) {
        this.encryptedkey = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public MoneyStruct getAmount() {
      return this.amount;
    }

    public requestCredit_args setAmount(@org.apache.thrift.annotation.Nullable MoneyStruct amount) {
      this.amount = amount;
      return this;
    }

    public void unsetAmount() {
      this.amount = null;
    }

    /** Returns true if field amount is set (has been assigned a value) and false otherwise */
    public boolean isSetAmount() {
      return this.amount != null;
    }

    public void setAmountIsSet(boolean value) {
      if (!value) {
        this.amount = null;
      }
    }

    public int getTimeInMonths() {
      return this.timeInMonths;
    }

    public requestCredit_args setTimeInMonths(int timeInMonths) {
      this.timeInMonths = timeInMonths;
      setTimeInMonthsIsSet(true);
      return this;
    }

    public void unsetTimeInMonths() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMEINMONTHS_ISSET_ID);
    }

    /** Returns true if field timeInMonths is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeInMonths() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMEINMONTHS_ISSET_ID);
    }

    public void setTimeInMonthsIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMEINMONTHS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case PESEL:
        if (value == null) {
          unsetPesel();
        } else {
          setPesel((java.lang.String)value);
        }
        break;

      case ENCRYPTEDKEY:
        if (value == null) {
          unsetEncryptedkey();
        } else {
          setEncryptedkey((java.lang.String)value);
        }
        break;

      case AMOUNT:
        if (value == null) {
          unsetAmount();
        } else {
          setAmount((MoneyStruct)value);
        }
        break;

      case TIME_IN_MONTHS:
        if (value == null) {
          unsetTimeInMonths();
        } else {
          setTimeInMonths((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PESEL:
        return getPesel();

      case ENCRYPTEDKEY:
        return getEncryptedkey();

      case AMOUNT:
        return getAmount();

      case TIME_IN_MONTHS:
        return getTimeInMonths();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PESEL:
        return isSetPesel();
      case ENCRYPTEDKEY:
        return isSetEncryptedkey();
      case AMOUNT:
        return isSetAmount();
      case TIME_IN_MONTHS:
        return isSetTimeInMonths();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof requestCredit_args)
        return this.equals((requestCredit_args)that);
      return false;
    }

    public boolean equals(requestCredit_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_pesel = true && this.isSetPesel();
      boolean that_present_pesel = true && that.isSetPesel();
      if (this_present_pesel || that_present_pesel) {
        if (!(this_present_pesel && that_present_pesel))
          return false;
        if (!this.pesel.equals(that.pesel))
          return false;
      }

      boolean this_present_encryptedkey = true && this.isSetEncryptedkey();
      boolean that_present_encryptedkey = true && that.isSetEncryptedkey();
      if (this_present_encryptedkey || that_present_encryptedkey) {
        if (!(this_present_encryptedkey && that_present_encryptedkey))
          return false;
        if (!this.encryptedkey.equals(that.encryptedkey))
          return false;
      }

      boolean this_present_amount = true && this.isSetAmount();
      boolean that_present_amount = true && that.isSetAmount();
      if (this_present_amount || that_present_amount) {
        if (!(this_present_amount && that_present_amount))
          return false;
        if (!this.amount.equals(that.amount))
          return false;
      }

      boolean this_present_timeInMonths = true;
      boolean that_present_timeInMonths = true;
      if (this_present_timeInMonths || that_present_timeInMonths) {
        if (!(this_present_timeInMonths && that_present_timeInMonths))
          return false;
        if (this.timeInMonths != that.timeInMonths)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPesel()) ? 131071 : 524287);
      if (isSetPesel())
        hashCode = hashCode * 8191 + pesel.hashCode();

      hashCode = hashCode * 8191 + ((isSetEncryptedkey()) ? 131071 : 524287);
      if (isSetEncryptedkey())
        hashCode = hashCode * 8191 + encryptedkey.hashCode();

      hashCode = hashCode * 8191 + ((isSetAmount()) ? 131071 : 524287);
      if (isSetAmount())
        hashCode = hashCode * 8191 + amount.hashCode();

      hashCode = hashCode * 8191 + timeInMonths;

      return hashCode;
    }

    @Override
    public int compareTo(requestCredit_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPesel()).compareTo(other.isSetPesel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPesel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pesel, other.pesel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEncryptedkey()).compareTo(other.isSetEncryptedkey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEncryptedkey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.encryptedkey, other.encryptedkey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAmount()).compareTo(other.isSetAmount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAmount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amount, other.amount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTimeInMonths()).compareTo(other.isSetTimeInMonths());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeInMonths()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeInMonths, other.timeInMonths);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("requestCredit_args(");
      boolean first = true;

      sb.append("pesel:");
      if (this.pesel == null) {
        sb.append("null");
      } else {
        sb.append(this.pesel);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("encryptedkey:");
      if (this.encryptedkey == null) {
        sb.append("null");
      } else {
        sb.append(this.encryptedkey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("amount:");
      if (this.amount == null) {
        sb.append("null");
      } else {
        sb.append(this.amount);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeInMonths:");
      sb.append(this.timeInMonths);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (amount != null) {
        amount.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class requestCredit_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public requestCredit_argsStandardScheme getScheme() {
        return new requestCredit_argsStandardScheme();
      }
    }

    private static class requestCredit_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<requestCredit_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, requestCredit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PESEL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pesel = iprot.readString();
                struct.setPeselIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ENCRYPTEDKEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.encryptedkey = iprot.readString();
                struct.setEncryptedkeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AMOUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.amount = new MoneyStruct();
                struct.amount.read(iprot);
                struct.setAmountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TIME_IN_MONTHS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.timeInMonths = iprot.readI32();
                struct.setTimeInMonthsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, requestCredit_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pesel != null) {
          oprot.writeFieldBegin(PESEL_FIELD_DESC);
          oprot.writeString(struct.pesel);
          oprot.writeFieldEnd();
        }
        if (struct.encryptedkey != null) {
          oprot.writeFieldBegin(ENCRYPTEDKEY_FIELD_DESC);
          oprot.writeString(struct.encryptedkey);
          oprot.writeFieldEnd();
        }
        if (struct.amount != null) {
          oprot.writeFieldBegin(AMOUNT_FIELD_DESC);
          struct.amount.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIME_IN_MONTHS_FIELD_DESC);
        oprot.writeI32(struct.timeInMonths);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class requestCredit_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public requestCredit_argsTupleScheme getScheme() {
        return new requestCredit_argsTupleScheme();
      }
    }

    private static class requestCredit_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<requestCredit_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, requestCredit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPesel()) {
          optionals.set(0);
        }
        if (struct.isSetEncryptedkey()) {
          optionals.set(1);
        }
        if (struct.isSetAmount()) {
          optionals.set(2);
        }
        if (struct.isSetTimeInMonths()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetPesel()) {
          oprot.writeString(struct.pesel);
        }
        if (struct.isSetEncryptedkey()) {
          oprot.writeString(struct.encryptedkey);
        }
        if (struct.isSetAmount()) {
          struct.amount.write(oprot);
        }
        if (struct.isSetTimeInMonths()) {
          oprot.writeI32(struct.timeInMonths);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, requestCredit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.pesel = iprot.readString();
          struct.setPeselIsSet(true);
        }
        if (incoming.get(1)) {
          struct.encryptedkey = iprot.readString();
          struct.setEncryptedkeyIsSet(true);
        }
        if (incoming.get(2)) {
          struct.amount = new MoneyStruct();
          struct.amount.read(iprot);
          struct.setAmountIsSet(true);
        }
        if (incoming.get(3)) {
          struct.timeInMonths = iprot.readI32();
          struct.setTimeInMonthsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class requestCredit_result implements org.apache.thrift.TBase<requestCredit_result, requestCredit_result._Fields>, java.io.Serializable, Cloneable, Comparable<requestCredit_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("requestCredit_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField NSA_FIELD_DESC = new org.apache.thrift.protocol.TField("nsa", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField WK_FIELD_DESC = new org.apache.thrift.protocol.TField("wk", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField UC_FIELD_DESC = new org.apache.thrift.protocol.TField("uc", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField WM_FIELD_DESC = new org.apache.thrift.protocol.TField("wm", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new requestCredit_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new requestCredit_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable CreditInfo success; // required
    public @org.apache.thrift.annotation.Nullable NoSuchAccount nsa; // required
    public @org.apache.thrift.annotation.Nullable WrongKey wk; // required
    public @org.apache.thrift.annotation.Nullable UnsupportedCurrency uc; // required
    public @org.apache.thrift.annotation.Nullable WrongMoney wm; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      NSA((short)1, "nsa"),
      WK((short)2, "wk"),
      UC((short)3, "uc"),
      WM((short)4, "wm");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // NSA
            return NSA;
          case 2: // WK
            return WK;
          case 3: // UC
            return UC;
          case 4: // WM
            return WM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CreditInfo.class)));
      tmpMap.put(_Fields.NSA, new org.apache.thrift.meta_data.FieldMetaData("nsa", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NoSuchAccount.class)));
      tmpMap.put(_Fields.WK, new org.apache.thrift.meta_data.FieldMetaData("wk", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WrongKey.class)));
      tmpMap.put(_Fields.UC, new org.apache.thrift.meta_data.FieldMetaData("uc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UnsupportedCurrency.class)));
      tmpMap.put(_Fields.WM, new org.apache.thrift.meta_data.FieldMetaData("wm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WrongMoney.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(requestCredit_result.class, metaDataMap);
    }

    public requestCredit_result() {
    }

    public requestCredit_result(
      CreditInfo success,
      NoSuchAccount nsa,
      WrongKey wk,
      UnsupportedCurrency uc,
      WrongMoney wm)
    {
      this();
      this.success = success;
      this.nsa = nsa;
      this.wk = wk;
      this.uc = uc;
      this.wm = wm;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public requestCredit_result(requestCredit_result other) {
      if (other.isSetSuccess()) {
        this.success = new CreditInfo(other.success);
      }
      if (other.isSetNsa()) {
        this.nsa = new NoSuchAccount(other.nsa);
      }
      if (other.isSetWk()) {
        this.wk = new WrongKey(other.wk);
      }
      if (other.isSetUc()) {
        this.uc = new UnsupportedCurrency(other.uc);
      }
      if (other.isSetWm()) {
        this.wm = new WrongMoney(other.wm);
      }
    }

    public requestCredit_result deepCopy() {
      return new requestCredit_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.nsa = null;
      this.wk = null;
      this.uc = null;
      this.wm = null;
    }

    @org.apache.thrift.annotation.Nullable
    public CreditInfo getSuccess() {
      return this.success;
    }

    public requestCredit_result setSuccess(@org.apache.thrift.annotation.Nullable CreditInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public NoSuchAccount getNsa() {
      return this.nsa;
    }

    public requestCredit_result setNsa(@org.apache.thrift.annotation.Nullable NoSuchAccount nsa) {
      this.nsa = nsa;
      return this;
    }

    public void unsetNsa() {
      this.nsa = null;
    }

    /** Returns true if field nsa is set (has been assigned a value) and false otherwise */
    public boolean isSetNsa() {
      return this.nsa != null;
    }

    public void setNsaIsSet(boolean value) {
      if (!value) {
        this.nsa = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public WrongKey getWk() {
      return this.wk;
    }

    public requestCredit_result setWk(@org.apache.thrift.annotation.Nullable WrongKey wk) {
      this.wk = wk;
      return this;
    }

    public void unsetWk() {
      this.wk = null;
    }

    /** Returns true if field wk is set (has been assigned a value) and false otherwise */
    public boolean isSetWk() {
      return this.wk != null;
    }

    public void setWkIsSet(boolean value) {
      if (!value) {
        this.wk = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public UnsupportedCurrency getUc() {
      return this.uc;
    }

    public requestCredit_result setUc(@org.apache.thrift.annotation.Nullable UnsupportedCurrency uc) {
      this.uc = uc;
      return this;
    }

    public void unsetUc() {
      this.uc = null;
    }

    /** Returns true if field uc is set (has been assigned a value) and false otherwise */
    public boolean isSetUc() {
      return this.uc != null;
    }

    public void setUcIsSet(boolean value) {
      if (!value) {
        this.uc = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public WrongMoney getWm() {
      return this.wm;
    }

    public requestCredit_result setWm(@org.apache.thrift.annotation.Nullable WrongMoney wm) {
      this.wm = wm;
      return this;
    }

    public void unsetWm() {
      this.wm = null;
    }

    /** Returns true if field wm is set (has been assigned a value) and false otherwise */
    public boolean isSetWm() {
      return this.wm != null;
    }

    public void setWmIsSet(boolean value) {
      if (!value) {
        this.wm = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CreditInfo)value);
        }
        break;

      case NSA:
        if (value == null) {
          unsetNsa();
        } else {
          setNsa((NoSuchAccount)value);
        }
        break;

      case WK:
        if (value == null) {
          unsetWk();
        } else {
          setWk((WrongKey)value);
        }
        break;

      case UC:
        if (value == null) {
          unsetUc();
        } else {
          setUc((UnsupportedCurrency)value);
        }
        break;

      case WM:
        if (value == null) {
          unsetWm();
        } else {
          setWm((WrongMoney)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case NSA:
        return getNsa();

      case WK:
        return getWk();

      case UC:
        return getUc();

      case WM:
        return getWm();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case NSA:
        return isSetNsa();
      case WK:
        return isSetWk();
      case UC:
        return isSetUc();
      case WM:
        return isSetWm();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof requestCredit_result)
        return this.equals((requestCredit_result)that);
      return false;
    }

    public boolean equals(requestCredit_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_nsa = true && this.isSetNsa();
      boolean that_present_nsa = true && that.isSetNsa();
      if (this_present_nsa || that_present_nsa) {
        if (!(this_present_nsa && that_present_nsa))
          return false;
        if (!this.nsa.equals(that.nsa))
          return false;
      }

      boolean this_present_wk = true && this.isSetWk();
      boolean that_present_wk = true && that.isSetWk();
      if (this_present_wk || that_present_wk) {
        if (!(this_present_wk && that_present_wk))
          return false;
        if (!this.wk.equals(that.wk))
          return false;
      }

      boolean this_present_uc = true && this.isSetUc();
      boolean that_present_uc = true && that.isSetUc();
      if (this_present_uc || that_present_uc) {
        if (!(this_present_uc && that_present_uc))
          return false;
        if (!this.uc.equals(that.uc))
          return false;
      }

      boolean this_present_wm = true && this.isSetWm();
      boolean that_present_wm = true && that.isSetWm();
      if (this_present_wm || that_present_wm) {
        if (!(this_present_wm && that_present_wm))
          return false;
        if (!this.wm.equals(that.wm))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetNsa()) ? 131071 : 524287);
      if (isSetNsa())
        hashCode = hashCode * 8191 + nsa.hashCode();

      hashCode = hashCode * 8191 + ((isSetWk()) ? 131071 : 524287);
      if (isSetWk())
        hashCode = hashCode * 8191 + wk.hashCode();

      hashCode = hashCode * 8191 + ((isSetUc()) ? 131071 : 524287);
      if (isSetUc())
        hashCode = hashCode * 8191 + uc.hashCode();

      hashCode = hashCode * 8191 + ((isSetWm()) ? 131071 : 524287);
      if (isSetWm())
        hashCode = hashCode * 8191 + wm.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(requestCredit_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNsa()).compareTo(other.isSetNsa());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNsa()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nsa, other.nsa);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetWk()).compareTo(other.isSetWk());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWk()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wk, other.wk);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUc()).compareTo(other.isSetUc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uc, other.uc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetWm()).compareTo(other.isSetWm());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWm()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wm, other.wm);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("requestCredit_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nsa:");
      if (this.nsa == null) {
        sb.append("null");
      } else {
        sb.append(this.nsa);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("wk:");
      if (this.wk == null) {
        sb.append("null");
      } else {
        sb.append(this.wk);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("uc:");
      if (this.uc == null) {
        sb.append("null");
      } else {
        sb.append(this.uc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("wm:");
      if (this.wm == null) {
        sb.append("null");
      } else {
        sb.append(this.wm);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class requestCredit_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public requestCredit_resultStandardScheme getScheme() {
        return new requestCredit_resultStandardScheme();
      }
    }

    private static class requestCredit_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<requestCredit_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, requestCredit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CreditInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // NSA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.nsa = new NoSuchAccount();
                struct.nsa.read(iprot);
                struct.setNsaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // WK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.wk = new WrongKey();
                struct.wk.read(iprot);
                struct.setWkIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // UC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.uc = new UnsupportedCurrency();
                struct.uc.read(iprot);
                struct.setUcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // WM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.wm = new WrongMoney();
                struct.wm.read(iprot);
                struct.setWmIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, requestCredit_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.nsa != null) {
          oprot.writeFieldBegin(NSA_FIELD_DESC);
          struct.nsa.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.wk != null) {
          oprot.writeFieldBegin(WK_FIELD_DESC);
          struct.wk.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.uc != null) {
          oprot.writeFieldBegin(UC_FIELD_DESC);
          struct.uc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.wm != null) {
          oprot.writeFieldBegin(WM_FIELD_DESC);
          struct.wm.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class requestCredit_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public requestCredit_resultTupleScheme getScheme() {
        return new requestCredit_resultTupleScheme();
      }
    }

    private static class requestCredit_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<requestCredit_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, requestCredit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetNsa()) {
          optionals.set(1);
        }
        if (struct.isSetWk()) {
          optionals.set(2);
        }
        if (struct.isSetUc()) {
          optionals.set(3);
        }
        if (struct.isSetWm()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetNsa()) {
          struct.nsa.write(oprot);
        }
        if (struct.isSetWk()) {
          struct.wk.write(oprot);
        }
        if (struct.isSetUc()) {
          struct.uc.write(oprot);
        }
        if (struct.isSetWm()) {
          struct.wm.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, requestCredit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.success = new CreditInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nsa = new NoSuchAccount();
          struct.nsa.read(iprot);
          struct.setNsaIsSet(true);
        }
        if (incoming.get(2)) {
          struct.wk = new WrongKey();
          struct.wk.read(iprot);
          struct.setWkIsSet(true);
        }
        if (incoming.get(3)) {
          struct.uc = new UnsupportedCurrency();
          struct.uc.read(iprot);
          struct.setUcIsSet(true);
        }
        if (incoming.get(4)) {
          struct.wm = new WrongMoney();
          struct.wm.read(iprot);
          struct.setWmIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
